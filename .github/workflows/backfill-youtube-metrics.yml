name: YouTube Backfill Metrics

on:
  workflow_dispatch:  # Manually triggered from the UI

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  backfill-youtube-metrics:
    runs-on: windows-latest  # Use Windows for PowerShell compatibility

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve YouTube Refresh Token from Azure Key Vault
        id: get-refresh-token
        shell: pwsh
        run: |
          $KeyVaultName = "${{ secrets.AZURE_KEYVAULT_NAME }}"
          $SecretName = "YouTube-RefreshToken"
          $RefreshToken = az keyvault secret show --vault-name $KeyVaultName --name $SecretName --query value -o tsv
          if (-not $RefreshToken) {
              Write-Error "Failed to retrieve the refresh token from Azure Key Vault."
              exit 1
          }
          Write-Host "Refresh token retrieved successfully."
          Write-Output "refresh_token=$RefreshToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Get YouTube Access Token using Refresh Token
        id: get-access-token
        shell: pwsh
        run: |
          $ClientId = "${{ secrets.YT_CLIENT_ID }}"
          $ClientSecret = "${{ secrets.YT_CLIENT_SECRET }}"
          $RefreshToken = "${{ env.refresh_token }}"

          # Make the API request to get the access token using the refresh token
          $TokenResponse = Invoke-RestMethod -Uri "https://oauth2.googleapis.com/token" -Method Post -Body @{
              client_id     = $ClientId
              client_secret = $ClientSecret
              refresh_token = $RefreshToken
              grant_type    = "refresh_token"
          } -ContentType "application/x-www-form-urlencoded"

          $AccessToken = $TokenResponse.access_token
          Write-Host "Access token retrieved successfully."
          Write-Output "access_token=$AccessToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install and Import PoshMongo Module
        shell: pwsh
        run: |
            # Install the PoshMongo module from the PowerShell Gallery
            Install-Module -Name PoshMongo -Force -Scope CurrentUser

            # Import the PoshMongo module
            Import-Module PoshMongo -verbose

            # Validate that the module is loaded correctly and cmdlet exists
            if (-not (Get-Command -Name 'Connect-MongoDBInstance' -ErrorAction SilentlyContinue)) {
                Write-Error "PoshMongo module did not load correctly or Connect-MongoDBInstance cmdlet is not available."
                exit 1
            } else {
                Get-Command -Module PoshMongo
                Write-Host "PoshMongo module loaded successfully, and Connect-MongoDBInstance cmdlet is available."
            }

      - name: Collect YouTube Metrics for Backfill
        id: collect-youtube
        shell: pwsh
        run: |
          # Get the channel ID from the repository variable
          $ChannelId = "${{ vars.CHANNEL_ID }}"

          # Define the YouTube Analytics API endpoint
          $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"

          # Get the start date (first day of the year)
          $StartDate = "2025-01-01"  # Adjust if the year changes dynamically
          $EndDate = (Get-Date).ToString("yyyy-MM-dd")  # Today's date

          # Loop through each day from StartDate to EndDate and collect metrics
          $CurrentDate = [datetime]::ParseExact($StartDate, "yyyy-MM-dd", $null)
          $EndDate = [datetime]::ParseExact($EndDate, "yyyy-MM-dd", $null)

          $AccessToken = "${{ env.access_token }}"  # âœ… Retrieve access token from env
          if (-not $AccessToken) {
            Write-Error "Access token is missing. Authentication failed."
            exit 1
          }

          while ($CurrentDate -le $EndDate) {
              $FormattedDate = $CurrentDate.ToString("yyyy-MM-dd")

              # Make the API request to YouTube Analytics API to get metrics for the current date
              $QueryParams = @{
                ids         = "channel==${ChannelId}"
                startDate   = $FormattedDate
                endDate     = $FormattedDate
                metrics     = "views,estimatedMinutesWatched,likes"
              }

              # Ensure proper URL encoding
              $EncodedQueryString = ($QueryParams.GetEnumerator() | ForEach-Object {
                "$([System.Web.HttpUtility]::UrlEncode($_.Key))=$([System.Web.HttpUtility]::UrlEncode($_.Value))"
              }) -join "&"

              # Construct the final API URL
              $ApiRequestUrl = "$($ApiUrl)?$($EncodedQueryString)"

              Write-Host "API Request URL: $ApiRequestUrl"  # Debugging output

              # Make the API request
              $Response = Invoke-RestMethod -Uri $ApiRequestUrl -Method Get -Headers @{
                Authorization = "Bearer $AccessToken"
                Accept = "application/json"
              }

              # Map the columns to the corresponding values in the rows
              $ColumnHeaders = $Response.columnHeaders
              $RowData = @()
              foreach ($Row in $Response.rows) {
                  $MappedRow = @{ }
                  for ($i = 0; $i -lt $Row.Count; $i++) {
                      $MappedRow[$ColumnHeaders[$i].name] = $Row[$i]
                  }
                  $RowData += $MappedRow
              }

              # Format data for MongoDB insertion (without platform field)
              $Data = @{
                  date       = $FormattedDate
                  metrics    = $RowData
              }

              # Import the PoshMongo module
              Import-Module PoshMongo -verbose

              # Validate that the module is loaded correctly and cmdlet exists
              if (-not (Get-Command -Name 'Connect-MongoDBInstance' -ErrorAction SilentlyContinue)) {
                  Write-Error "PoshMongo module did not load correctly or Connect-MongoDBInstance cmdlet is not available."
                  exit 1
              }
              # MongoDB URI and Collection information
              $MongoUri = "${{ secrets.MONGODB_URI }}"
              $MongoDbName = "metrics"
              $MongoCollection = "youtube"

              # Connect to MongoDB using the Connect-MongoDBInstance cmdlet from PoshMongo
              $MongoClient = Connect-MongoDBInstance -ConnectionString $MongoUri
              $MongoClient = Connect-MongoDBInstance -ConnectionString

              # Retrieve the database and collection
              $Database = $MongoClient.GetDatabase($MongoDbName)
              $Collection = $Database.GetCollection($MongoCollection)

              # Insert the data into MongoDB
              $Collection.InsertOne($Data)

              Write-Host "YouTube metrics for $FormattedDate inserted into MongoDB successfully."

              # Move to the next day
              $CurrentDate = $CurrentDate.AddDays(1)
          }

      - name: Output result
        run: |
          echo "YouTube metrics backfilled from 2025-01-01 to $(Get-Date -Format 'yyyy-MM-dd')"
