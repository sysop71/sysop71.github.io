name: YouTube Backfill Metrics

on:
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: false
  ACTIONS_STEP_DEBUG: false

jobs:
  backfill-youtube-metrics:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve YouTube Refresh Token from Azure Key Vault
        id: get-refresh-token
        shell: pwsh
        run: |
          $KeyVaultName = "${{ secrets.AZURE_KEYVAULT_NAME }}"
          $SecretName = "YouTube-RefreshToken"
          $RefreshToken = az keyvault secret show --vault-name $KeyVaultName --name $SecretName --query value -o tsv
          if (-not $RefreshToken) {
              Write-Error "Failed to retrieve the refresh token from Azure Key Vault."
              exit 1
          }
          Write-Host "Refresh token retrieved successfully"
          Write-Output "refresh_token=$RefreshToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Get YouTube Access Token using Refresh Token
        id: get-access-token
        shell: pwsh
        run: |
          $ClientId = "${{ secrets.YT_CLIENT_ID }}"
          $ClientSecret = "${{ secrets.YT_CLIENT_SECRET }}"
          $RefreshToken = "${{ env.refresh_token }}"

          $TokenResponse = Invoke-RestMethod -Uri "https://oauth2.googleapis.com/token" -Method Post -Body @{
              client_id     = $ClientId
              client_secret = $ClientSecret
              refresh_token = $RefreshToken
              grant_type    = "refresh_token"
          } -ContentType "application/x-www-form-urlencoded"

          $AccessToken = $TokenResponse.access_token
          Write-Host "Access token retrieved successfully"
          Write-Output "access_token=$AccessToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install and Import PoshMongo Module
        shell: pwsh
        run: |
          Install-Module -Name PoshMongo -Force -Scope CurrentUser
          Import-Module PoshMongo
          if (-not (Get-Command -Name 'Connect-MongoDBInstance' -ErrorAction SilentlyContinue)) {
              Write-Error "PoshMongo module did not load correctly."
              exit 1
          }

      - name: Collect YouTube Metrics for Backfill
        id: collect-youtube
        shell: pwsh
        run: |
          $ChannelId = "${{ vars.CHANNEL_ID }}"
          $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"
          $StartDate = "2025-01-01"
          $EndDate = (Get-Date).ToString("yyyy-MM-dd")
          $AccessToken = "${{ env.access_token }}"

          if (-not $AccessToken) {
            Write-Error "Access token is missing."
            exit 1
          }

          Import-Module PoshMongo
          $MongoUri = "${{ secrets.MONGODB_URI }}"
          $MongoDbName = "metrics"
          $MongoCollection = "youtube"

          $MongoClient = Connect-MongoDBInstance -ConnectionString $MongoUri
          $Database = Get-MongoDBDatabase -DatabaseName $MongoDbName
          $Collection = Get-MongoDBCollection -CollectionName $MongoCollection -MongoDatabase $Database

          # Define file to log missing dates
          $MissingDatesFile = "$env:GITHUB_WORKSPACE/missing_dates.txt"
          if (Test-Path $MissingDatesFile) { Remove-Item $MissingDatesFile }

          $CurrentDate = [datetime]::ParseExact($StartDate, "yyyy-MM-dd", $null)
          $EndDate = [datetime]::ParseExact($EndDate, "yyyy-MM-dd", $null)

          while ($CurrentDate -le $EndDate) {
              $FormattedDate = $CurrentDate.ToString("yyyy-MM-dd")

              # API Request
              $QueryParams = @{
                ids         = "channel==${ChannelId}"
                startDate   = $FormattedDate
                endDate     = $FormattedDate
                metrics     = "views,estimatedMinutesWatched,likes"
              }

              $EncodedQueryString = ($QueryParams.GetEnumerator() | ForEach-Object {
                "$([System.Web.HttpUtility]::UrlEncode($_.Key))=$([System.Web.HttpUtility]::UrlEncode($_.Value))"
              }) -join "&"

              $ApiRequestUrl = "$($ApiUrl)?$($EncodedQueryString)"

              Write-Host "Requesting YouTube metrics for $FormattedDate..."
              try {
                  $Response = Invoke-RestMethod -Uri $ApiRequestUrl -Method Get -Headers @{
                    Authorization = "Bearer $AccessToken"
                    Accept = "application/json"
                  }

                  # Check if there are any metric rows
                  if ($Response.rows.Count -eq 0) {
                      Add-Content -Path $MissingDatesFile -Value $FormattedDate
                      Write-Host "No metrics for $FormattedDate. Logged as missing."
                  } else {
                      $ColumnHeaders = $Response.columnHeaders
                      $RowData = @()
                      foreach ($Row in $Response.rows) {
                          $MappedRow = @{ }
                          for ($i = 0; $i -lt $Row.Count; $i++) {
                              $MappedRow[$ColumnHeaders[$i].name] = $Row[$i]
                          }
                          $RowData += $MappedRow
                      }

                      $Data = @{
                          date    = $FormattedDate
                          metrics = $RowData
                      } |ConvertFrom-Json -Depth 99 -Compress

                      #$Collection.InsertOne($Data)
                      Add-MongoDBDocument -Document $Data -MongoCollection $Collection
                      Write-Host "YouTube metrics for $FormattedDate inserted into MongoDB successfully."
                  }
              }
              catch {
                  throw "API request failed for $FormattedDate. Error: $($_.Exception.Message)"
              }

              $CurrentDate = $CurrentDate.AddDays(1)
          }

          Write-Host "Missing dates file created at: $MissingDatesFile"

      - name: Commit missing dates file if needed
        shell: pwsh
        run: |
          $MissingDatesFile = "$env:GITHUB_WORKSPACE/missing_dates.txt"
          if (Test-Path $MissingDatesFile) {
              Write-Host "Committing missing dates file to repository..."
              git config --global user.name "github-actions"
              git config --global user.email "github-actions@github.com"
              git add missing_dates.txt
              git commit -m "Add missing YouTube metric dates"
              git push
          } else {
              Write-Host "No missing dates detected, skipping commit."
          }

      - name: Output result
        run: |
          echo "YouTube metrics backfilled from 2025-01-01 to $(Get-Date -Format 'yyyy-MM-dd')"
