name: Collect YouTube Metrics

on:
  schedule:
    - cron: '30 0 * * *'  # Run daily at 00:30 UTC
  workflow_dispatch:  # Manually triggered from the UI

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  collect-youtube-metrics:
    runs-on: windows-latest # Use Windows for PowerShell compatibility

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve YouTube Refresh Token from Azure Key Vault
        id: get-refresh-token
        shell: pwsh
        run: |
          $KeyVaultName = "${{ secrets.AZURE_KEYVAULT_NAME }}"
          $SecretName = "YouTube-RefreshToken"
          $RefreshToken = az keyvault secret show --vault-name $KeyVaultName --name $SecretName --query value -o tsv
          if (-not $RefreshToken) {
              Write-Error "Failed to retrieve the refresh token from Azure Key Vault."
              exit 1
          }
          Write-Host "Refresh token retrieved successfully."
          Write-Output "refresh_token=$RefreshToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Get YouTube Access Token using Refresh Token
        id: get-access-token
        shell: pwsh
        run: |
          $ClientId = "${{ secrets.YT_CLIENT_ID }}"
          $ClientSecret = "${{ secrets.YT_CLIENT_SECRET }}"
          $RefreshToken = "${{ env.refresh_token }}"
          $RedirectUri = "urn:ietf:wg:oauth:2.0:oob" # Use your redirect URI here

          # Make the API request to get the access token using the refresh token
          $TokenResponse = Invoke-RestMethod -Uri "https://oauth2.googleapis.com/token" -Method Post -Body @{
              client_id     = $ClientId
              client_secret = $ClientSecret
              refresh_token = $RefreshToken
              grant_type    = "refresh_token"
              redirect_uri  = $RedirectUri
          } -ContentType "application/x-www-form-urlencoded"

          $AccessToken = $TokenResponse.access_token
          Write-Host "Access token retrieved successfully."
          Write-Output "access_token=$AccessToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Collect YouTube Metrics
        id: collect-youtube
        shell: pwsh
        run: |
          # Get the channel ID from the repository variable
          $ChannelId = "${{ vars.CHANNEL_ID }}"

          # Define the YouTube Analytics API endpoint
          $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"
          $StartDate = (Get-Date).AddDays(-1).ToString("yyyy-MM-dd")
          $EndDate = (Get-Date).ToString("yyyy-MM-dd")

          # Make the API request to YouTube Analytics API to get metrics
          $Response = Invoke-RestMethod -Uri $ApiUrl -Method Get -Headers @{Authorization = "Bearer $AccessToken"} -Body @{
              "ids"            = "channel==${ChannelId}"
              "startDate"      = $StartDate
              "endDate"        = $EndDate
              "metrics"        = "views,estimatedMinutesWatched,likes"
          } -ContentType "application/json"

          # Map the columns to the corresponding values in the rows
          $ColumnHeaders = $Response.columnHeaders
          $RowData = @()
          foreach ($Row in $Response.rows) {
              $MappedRow = @{}
              for ($i = 0; $i -lt $Row.Count; $i++) {
                  $MappedRow[$ColumnHeaders[$i].name] = $Row[$i]
              }
              $RowData += $MappedRow
          }

          # Format data for MongoDB insertion (without platform field)
          $Data = @{
              date       = (Get-Date).ToString("yyyy-MM-dd")
              metrics    = $RowData
          }

          # Insert the data into MongoDB
          $MongoUri = "${{ secrets.MONGODB_URI }}"
          $MongoDbName = "metrics"
          $MongoCollection = "youtube"

          # Connect to MongoDB and insert the data
          $MongoClient = New-Object MongoDB.Driver.MongoClient($MongoUri)
          $Database = $MongoClient.GetDatabase($MongoDbName)
          $Collection = $Database.GetCollection[PSObject]($MongoCollection)
          $Collection.InsertOne($Data)

          Write-Host "YouTube metrics inserted into MongoDB successfully."
