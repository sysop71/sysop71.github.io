name: Collect YouTube Metrics

on:
  schedule:
    - cron: '30 0 * * *'  # Run daily at 00:30 UTC
  workflow_dispatch:  # Manually triggered from the UI

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  collect-youtube-metrics:
    runs-on: windows-latest # Use Windows for PowerShell compatibility

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve YouTube Refresh Token from Azure Key Vault
        id: get-refresh-token
        shell: pwsh
        run: |
          $KeyVaultName = "${{ secrets.AZURE_KEYVAULT_NAME }}"
          $SecretName = "YouTube-RefreshToken"
          $RefreshToken = az keyvault secret show --vault-name $KeyVaultName --name $SecretName --query value -o tsv
          if (-not $RefreshToken) {
              Write-Error "Failed to retrieve the refresh token from Azure Key Vault."
              exit 1
          }
          Write-Host "Refresh token retrieved successfully."
          Write-Output "refresh_token=$RefreshToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Get YouTube Access Token using Refresh Token
        id: get-access-token
        shell: pwsh
        run: |
          $ClientId = "${{ secrets.YT_CLIENT_ID }}"
          $ClientSecret = "${{ secrets.YT_CLIENT_SECRET }}"
          $RefreshToken = "${{ env.refresh_token }}"

          $TokenResponse = Invoke-RestMethod -Uri "https://oauth2.googleapis.com/token" -Method Post -Body @{
              client_id     = $ClientId
              client_secret = $ClientSecret
              refresh_token = $RefreshToken
              grant_type    = "refresh_token"
          } -ContentType "application/x-www-form-urlencoded"

          $AccessToken = $TokenResponse.access_token
          Write-Host "Access token retrieved successfully."
          Write-Output "access_token=$AccessToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install and Import PoshMongo Module
        shell: pwsh
        run: |
          Install-Module -Name PoshMongo -Force -Scope CurrentUser
          Import-Module PoshMongo
          if (-not (Get-Command -Name 'Connect-MongoDBInstance' -ErrorAction SilentlyContinue)) {
              Write-Error "PoshMongo module did not load correctly."
              exit 1
          }

      - name: Process Missing Date Metrics
        id: process-metrics
        shell: pwsh
        run: |
          $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"
          $ChannelId = "${{ vars.CHANNEL_ID }}"
          $AccessToken = "${{ env.access_token }}"

          if (-not $AccessToken) {
            Write-Error "Access token is missing."
            exit 1
          }

          Import-Module PoshMongo
          $MissingDatesFile = "missing_dates.txt"
          if (Test-Path $MissingDatesFile) {
              $MissingDates = Get-Content $MissingDatesFile
              $NewMissingDates = @()
              foreach ($Date in $MissingDates) {
                  $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"
                  $Response = Invoke-RestMethod -Uri $ApiUrl -Method Get -Headers @{Authorization = "Bearer $AccessToken"} -Body @{
                      "ids"            = "channel==${{ vars.CHANNEL_ID }}"
                      "startDate"      = $Date
                      "endDate"        = $Date
                      "metrics"        = "views,estimatedMinutesWatched,likes"
                  } -ContentType "application/json"
                  if ($Response.rows.Count -gt 0) {
                      $ColumnHeaders = $Response.columnHeaders
                      $RowData = @()
                      foreach ($Row in $Response.rows) {
                          $MappedRow = @{}
                          for ($i = 0; $i -lt $Row.Count; $i++) {
                              $MappedRow[$ColumnHeaders[$i].name] = $Row[$i]
                          }
                          $RowData += $MappedRow
                      }
                      $Data = @{ date = $Date; metrics = $RowData }
                      $MongoUri = "${{ secrets.MONGODB_URI }}"
                      $MongoDbName = "metrics"
                      $MongoCollection = "youtube"
                      $MongoClient = Connect-MongoDBInstance -ConnectionString $MongoUri
                      $Database = Get-MongoDBDatabase -DatabaseName $MongoDbName
                      $Collection = Get-MongoDBCollection -CollectionName $MongoCollection -MongoDatabase $Database
                      $Collection.InsertOne($Data)
                      Write-Host "Metrics for $Date inserted into MongoDB."
                  } else {
                      $NewMissingDates += $Date
                  }
              }
              if ($NewMissingDates.Count -eq 0) {
                  Remove-Item $MissingDatesFile
              } else {
                  $NewMissingDates | Set-Content $MissingDatesFile
              }
          }

      - name: Collect YouTube Metrics
        id: collect-metrics
        shell: pwsh
        run: |
          $ApiUrl = "https://youtubeanalytics.googleapis.com/v2/reports"
          $ChannelId = "${{ vars.CHANNEL_ID }}"
          $FormattedDate = (Get-Date).AddDays(-1).ToString("yyyy-MM-dd")
          $AccessToken = "${{ env.access_token }}"

          if (-not $AccessToken) {
            Write-Error "Access token is missing."
            exit 1
          }

          # Construct Query Parameters
          $QueryParams = @{
            ids       = "channel==$ChannelId"
            startDate = $FormattedDate
            endDate   = $FormattedDate
            metrics   = "views,estimatedMinutesWatched,likes"
          }

          # Encode Query String
          $EncodedQueryString = ($QueryParams.GetEnumerator() | ForEach-Object {
            "$([System.Web.HttpUtility]::UrlEncode($_.Key))=$([System.Web.HttpUtility]::UrlEncode($_.Value))"
          }) -join "&"

          $ApiRequestUrl = "$($ApiUrl)?$($EncodedQueryString)"
          Write-Host "Requesting YouTube metrics for $FormattedDate..."

          try {
              Import-Module PoshMongo
              $Response = Invoke-RestMethod -Uri $ApiRequestUrl -Method Get -Headers @{
                Authorization = "Bearer $AccessToken"
                Accept        = "application/json"
              }

              if ($Response.rows.Count -gt 0) {
                  $ColumnHeaders = $Response.columnHeaders
                  $RowData = @()
                  foreach ($Row in $Response.rows) {
                      $MappedRow = @{}
                      for ($i = 0; $i -lt $Row.Count; $i++) {
                          $MappedRow[$ColumnHeaders[$i].name] = $Row[$i]
                      }
                      $RowData += $MappedRow
                  }

                  $Data = @{ date = $FormattedDate; metrics = $RowData }
                  $MongoUri = "${{ secrets.MONGODB_URI }}"
                  $MongoDbName = "metrics"
                  $MongoCollection = "youtube"
                  $MongoClient = Connect-MongoDBInstance -ConnectionString $MongoUri
                  $Database = Get-MongoDBDatabase -DatabaseName $MongoDbName
                  $Collection = Get-MongoDBCollection -CollectionName $MongoCollection -MongoDatabase $Database
                  $Collection.InsertOne($Data)
                  Write-Host "Metrics for $FormattedDate inserted into MongoDB."
              } else {
                  Write-Host "No metrics data found for $FormattedDate."
              }
          } catch {
              Write-Error "Failed to retrieve YouTube metrics: $_"
              exit 1
          }
