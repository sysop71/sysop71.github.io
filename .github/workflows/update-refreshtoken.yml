name: Update Twitch Refresh Token Secret

on:
  schedule:
    # This will run once a day at 8:00 AM UTC (you can adjust the cron timing as needed)
    - cron: "0 8 * * *"  # Runs at 8:00 AM UTC every day
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-refresh-token:
    runs-on: ubuntu-latest

    steps:
      - name: Set up GitHub Token
        id: setup-token
        run: |
          echo "GH_PAT=${{ secrets.GH_PAT }}" >> $GITHUB_ENV

      - name: Fetch New Refresh Token from Twitch API
        id: fetch-refresh-token
        run: |
          # Setup variables
          ClientId="${{ secrets.CLIENTID }}"
          ClientSecret="${{ secrets.CLIENTSECRET }}"
          RefreshToken="${{ secrets.REFRESHTOKEN }}"

          # Get new access token using the refresh token
          response=$(curl -X POST "https://id.twitch.tv/oauth2/token" -d "client_id=$ClientId&client_secret=$ClientSecret&grant_type=refresh_token&refresh_token=$RefreshToken")
          
          # Extract the new refresh token from the response
          NewRefreshToken=$(echo $response | jq -r '.refresh_token')

          # Save the new refresh token to an environment variable
          echo "NEW_REFRESH_TOKEN=$NewRefreshToken" >> $GITHUB_ENV

      - name: Get GitHub Repository Public Key
        id: get-public-key
        run: |
          # Fetch the public key from GitHub's API to encrypt the refresh token
          RepoName="${{ github.repository }}"
          GitHubToken="${{ secrets.GH_PAT }}"

          PublicKeyResponse=$(curl -s -H "Authorization: Bearer $GitHubToken" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/$RepoName/actions/secrets/public_key")
          
          # Extract the public key and key_id from the response
          PublicKey=$(echo $PublicKeyResponse | jq -r '.key')
          KeyId=$(echo $PublicKeyResponse | jq -r '.key_id')

          echo "KEY_ID=$KeyId" >> $GITHUB_ENV
          echo "PUBLIC_KEY=$PublicKey" >> $GITHUB_ENV

      - name: Encrypt New Refresh Token
        id: encrypt-token
        run: |
          # Encrypt the new refresh token using GitHub's public key
          echo "Encrypting the new refresh token..."

          # Using OpenSSL to encrypt the token
          echo -n "${{ env.NEW_REFRESH_TOKEN }}" | openssl rsautl -encrypt -pubin -inkey <(echo "${{ env.PUBLIC_KEY }}") | base64 | tr -d '\n' > encrypted_refresh_token.txt
          cat encrypted_refresh_token.txt

      - name: Update GitHub Secret with New Refresh Token
        run: |
          # Prepare the request to update the secret
          SecretBody=$(jq -n --arg encrypted_value "$(cat encrypted_refresh_token.txt)" --arg key_id "${{ env.KEY_ID }}" \
            '{ "encrypted_value": $encrypted_value, "key_id": $key_id }')

          # Update the secret in the GitHub repository
          RepoName="${{ github.repository }}"
          GitHubToken="${{ secrets.GH_PAT }}"
          
          curl -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GitHubToken" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "$SecretBody" \
            "https://api.github.com/repos/$RepoName/actions/secrets/REFRESHTOKEN"

          echo "Refresh token secret updated successfully!"
